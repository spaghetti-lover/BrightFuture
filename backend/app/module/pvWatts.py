import streamlit as st
import requests
import json
import pandas as pd
import matplotlib.pyplot as plt

API_KEY = "iNCJ0WdwiGMysKGJTYQySapNZ1UBbjVRXeyeuCI7"

st.title("PVWatts Solar Energy Calculator")

# Nh·∫≠p th√¥ng tin t·ª´ ng∆∞·ªùi d√πng
lat = st.text_input("Latitude (ƒë·ªô vƒ©)", value="10.7769")
lon = st.text_input("Longitude (ƒë·ªô kinh)", value="106.6951")
system_capacity = st.number_input("C√¥ng su·∫•t h·ªá th·ªëng (kW)", value=5)
tilt = st.number_input("G√≥c nghi√™ng (ƒë·ªô)", value=20)
azimuth = st.number_input("G√≥c ph∆∞∆°ng v·ªã (ƒë·ªô)", value=180)
array_type = st.selectbox(
    "Ki·ªÉu b·ªë tr√≠", options=["0 - Fixed", "1 - Adjustable", "2 - Tracking"], index=0
)
module_type = st.selectbox(
    "Lo·∫°i m√¥-ƒëun",
    options=["0 - Standard", "1 - High Efficiency", "2 - Thin Film"],
    index=0,
)
losses = st.number_input("T·ªïn th·∫•t (%)", value=14)

# Chuy·ªÉn ƒë·ªïi l·ª±a ch·ªçn ki·ªÉu b·ªë tr√≠ v√† lo·∫°i m√¥-ƒëun th√†nh s·ªë
array_type = int(array_type.split(" ")[0])
module_type = int(module_type.split(" ")[0])

# N√∫t ƒë·ªÉ g·ªçi API
if st.button("T√≠nh to√°n"):
    # G·ªçi API
    url = f"https://developer.nrel.gov/api/pvwatts/v6.json?api_key={API_KEY}&lat={lat}&lon={lon}&system_capacity={system_capacity}&tilt={tilt}&azimuth={azimuth}&array_type={array_type}&module_type={module_type}&losses={losses}&output_format=json"

    response = requests.get(url)
    data = response.json()

    # X·ª≠ l√Ω v√† in k·∫øt qu·∫£
    if "outputs" in data:
        outputs = data["outputs"]
        monthly_ac_energy = outputs["ac_monthly"]
        monthly_solar_radiation = outputs["solrad_monthly"]

        # Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu th√†nh DataFrame
        months = [
            "Th√°ng 1",
            "Th√°ng 2",
            "Th√°ng 3",
            "Th√°ng 4",
            "Th√°ng 5",
            "Th√°ng 6",
            "Th√°ng 7",
            "Th√°ng 8",
            "Th√°ng 9",
            "Th√°ng 10",
            "Th√°ng 11",
            "Th√°ng 12",
        ]
        df = pd.DataFrame(
            {
                "Th√°ng": months,
                "Radiation (kWh/m¬≤/ng√†y)": monthly_solar_radiation,
                "AC Energy (kWh)": monthly_ac_energy,
            }
        )

        # Hi·ªÉn th·ªã b·∫£ng k·∫øt qu·∫£
        st.subheader("K·∫øt qu·∫£ t√≠nh to√°n:")
        st.dataframe(df)

        # V·∫Ω bi·ªÉu ƒë·ªì
        fig, ax1 = plt.subplots(figsize=(10, 6))

        # Bi·ªÉu ƒë·ªì c·ªôt cho Solar Radiation
        color = "tab:blue"
        ax1.set_xlabel("Th√°ng")
        ax1.set_ylabel("Radiation (kWh/m¬≤/ng√†y)", color=color)
        ax1.bar(
            df["Th√°ng"],
            df["Radiation (kWh/m¬≤/ng√†y)"],
            color=color,
            alpha=0.6,
            label="Radiation",
        )
        ax1.tick_params(axis="y", labelcolor=color)

        # Bi·ªÉu ƒë·ªì ƒë∆∞·ªùng cho AC Energy
        ax2 = ax1.twinx()
        color = "tab:orange"
        ax2.set_ylabel("AC Energy (kWh)", color=color)
        ax2.plot(
            df["Th√°ng"],
            df["AC Energy (kWh)"],
            color=color,
            marker="o",
            label="AC Energy",
        )
        ax2.tick_params(axis="y", labelcolor=color)

        # ƒêi·ªÅu ch·ªânh nh√£n tr·ª•c x ƒë·ªÉ tr√°nh ch·ªìng ch√©o
        plt.xticks(rotation=45)  # Xoay nh√£n
        plt.title("Bi·ªÉu ƒë·ªì Radiation v√† AC Energy theo th√°ng")
        fig.tight_layout()
        st.pyplot(fig)

        # In t·ªïng nƒÉng l∆∞·ª£ng h√†ng nƒÉm v·ªõi ƒë·ªãnh d·∫°ng d·ªÖ nh√¨n
        annual_ac_energy = outputs["ac_annual"]
        average_solar_radiation = outputs["solrad_annual"]

        # Hi·ªÉn th·ªã t·ªïng nƒÉng l∆∞·ª£ng h√†ng nƒÉm v·ªõi ƒë·ªãnh d·∫°ng ƒë·∫πp
        st.subheader("T·ªïng nƒÉng l∆∞·ª£ng h√†ng nƒÉm:")
        st.write(
            f"üåû **T·ªïng Solar Radiation:** {average_solar_radiation:.2f} kWh/m¬≤/ng√†y"
        )
        st.write(f"‚ö° **T·ªïng AC Energy:** {annual_ac_energy:.2f} kWh")
    else:
        st.error("L·ªói: " + str(data.get("error", "L·ªói kh√¥ng x√°c ƒë·ªãnh")))
